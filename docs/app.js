class GitHubGanttApp {
  constructor() {
    this.gantt = null;
    this.currentView = 'Week';
    this.tasks = [];
    this.lastUpdated = null;
    
    this.init();
  }

  init() {
    this.setupEventListeners();
    this.loadData();
  }

  setupEventListeners() {
    // View mode buttons
    document.getElementById('view-day').addEventListener('click', () => this.changeView('Day'));
    document.getElementById('view-week').addEventListener('click', () => this.changeView('Week'));
    document.getElementById('view-month').addEventListener('click', () => this.changeView('Month'));
    document.getElementById('view-quarter').addEventListener('click', () => this.changeView('Quarter'));
    
    // Refresh button
    document.getElementById('refresh').addEventListener('click', () => this.loadData());
  }

  changeView(viewMode) {
    this.currentView = viewMode;
    
    // Update active button
    document.querySelectorAll('.controls button').forEach(btn => {
      btn.classList.remove('active');
    });
    
    const viewButtons = {
      'Day': 'view-day',
      'Week': 'view-week', 
      'Month': 'view-month',
      'Quarter': 'view-quarter'
    };
    
    document.getElementById(viewButtons[viewMode]).classList.add('active');
    
    // Re-render gantt if it exists
    if (this.gantt && this.tasks.length > 0) {
      this.renderGantt();
    }
  }

  async loadData() {
    try {
      this.updateStatus('Loading project data...');
      
      // First try to load from tasks.json (generated by GitHub Actions)
      const response = await fetch('tasks.json');
      
      if (response.ok) {
        const data = await response.json();
        this.tasks = data.tasks || [];
        this.lastUpdated = data.lastUpdated;
        this.updateStatus(`Loaded ${this.tasks.length} tasks. Last updated: ${this.formatDate(this.lastUpdated)}`);
      } else {
        // Fall back to sample data
        this.loadSampleData();
      }
      
      this.renderGantt();
    } catch (error) {
      console.error('Error loading data:', error);
      this.loadSampleData();
    }
  }

  loadSampleData() {
    this.updateStatus('Using sample data - GitHub Actions workflow not yet configured');
    
    // Generate sample tasks that demonstrate the features
    const today = new Date();
    const startDate = new Date(today.getFullYear(), today.getMonth(), 1);
    
    this.tasks = [
      {
        id: 'design-system',
        name: 'Design System Updates',
        start: this.formatDateString(startDate),
        end: this.formatDateString(this.addDays(startDate, 14)),
        progress: 75,
        dependencies: '',
        custom_class: 'hcd-task',
        github_url: 'https://github.com/example/repo/issues/1'
      },
      {
        id: 'api-integration',
        name: 'GitHub API Integration',
        start: this.formatDateString(this.addDays(startDate, 7)),
        end: this.formatDateString(this.addDays(startDate, 21)),
        progress: 30,
        dependencies: 'design-system',
        custom_class: 'engineering-task',
        github_url: 'https://github.com/example/repo/issues/2'
      },
      {
        id: 'user-testing',
        name: 'User Testing & Feedback',
        start: this.formatDateString(this.addDays(startDate, 14)),
        end: this.formatDateString(this.addDays(startDate, 28)),
        progress: 0,
        dependencies: '',
        custom_class: 'product-task',
        github_url: 'https://github.com/example/repo/issues/3'
      },
      {
        id: 'accessibility-audit',
        name: 'Accessibility Audit',
        start: this.formatDateString(this.addDays(startDate, 21)),
        end: this.formatDateString(this.addDays(startDate, 35)),
        progress: 0,
        dependencies: 'api-integration',
        custom_class: 'accessibility-task',
        github_url: 'https://github.com/example/repo/issues/4'
      },
      {
        id: 'content-review',
        name: 'Content Review & Updates',
        start: this.formatDateString(this.addDays(startDate, 10)),
        end: this.formatDateString(this.addDays(startDate, 24)),
        progress: 50,
        dependencies: '',
        custom_class: 'content-task',
        github_url: 'https://github.com/example/repo/issues/5'
      },
      {
        id: 'deployment',
        name: 'Production Deployment',
        start: this.formatDateString(this.addDays(startDate, 35)),
        end: this.formatDateString(this.addDays(startDate, 42)),
        progress: 0,
        dependencies: 'accessibility-audit,content-review',
        custom_class: 'engineering-task',
        github_url: 'https://github.com/example/repo/issues/6'
      }
    ];
  }

  renderGantt() {
    if (this.tasks.length === 0) {
      document.getElementById('gantt').innerHTML = '<div class="loading">No tasks to display</div>';
      return;
    }

    try {
      this.gantt = new Gantt('#gantt', this.tasks, {
        view_mode: this.currentView,
        bar_height: 30,
        arrow_curve: 5,
        padding: 18,
        popup: (task) => this.createPopup(task),
        on_click: (task) => this.onTaskClick(task),
        on_date_change: (task, start, end) => this.onDateChange(task, start, end),
        on_progress_change: (task, progress) => this.onProgressChange(task, progress),
        on_view_change: (mode) => this.onViewChange(mode)
      });
    } catch (error) {
      console.error('Error rendering Gantt chart:', error);
      document.getElementById('gantt').innerHTML = '<div class="error">Error rendering Gantt chart: ' + error.message + '</div>';
    }
  }

  createPopup(task) {
    const progress = task.progress || 0;
    const startDate = this.formatDate(task.start);
    const endDate = this.formatDate(task.end);
    
    return `
      <div class="popup-content">
        <h3>${task.name}</h3>
        <p><strong>Progress:</strong> ${progress}%</p>
        <p><strong>Start:</strong> ${startDate}</p>
        <p><strong>End:</strong> ${endDate}</p>
        ${task.github_url ? `<p><a href="${task.github_url}" target="_blank">View on GitHub</a></p>` : ''}
      </div>
    `;
  }

  onTaskClick(task) {
    if (task.github_url) {
      window.open(task.github_url, '_blank');
    }
  }

  onDateChange(task, start, end) {
    console.log('Date changed:', task.name, start, end);
    // In a real implementation, this would update the GitHub issue
  }

  onProgressChange(task, progress) {
    console.log('Progress changed:', task.name, progress);
    // In a real implementation, this would update the GitHub issue
  }

  onViewChange(mode) {
    console.log('View changed to:', mode);
  }

  updateStatus(message) {
    document.getElementById('status').textContent = message;
  }

  formatDate(dateString) {
    if (!dateString) return '';
    
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric'
    });
  }

  formatDateString(date) {
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    return `${year}-${month}-${day}`;
  }

  addDays(date, days) {
    const result = new Date(date);
    result.setDate(result.getDate() + days);
    return result;
  }
}

// Initialize the app when the DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  new GitHubGanttApp();
});